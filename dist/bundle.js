/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/board_data.ts":
/*!***************************!*\
  !*** ./src/board_data.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoardHandler = void 0;\nvar utils = __importStar(__webpack_require__(/*! ./utils */ \"./src/utils.ts\"));\nvar BoardHandler = /** @class */ (function () {\n    function BoardHandler(cols, rows, handler) {\n        this.COLS = cols;\n        this.ROWS = rows;\n        this.handler = handler;\n        this.board = this.buildBoard(cols, rows);\n    }\n    BoardHandler.prototype.buildBoard = function (cols, rows) {\n        var board = [];\n        for (var x = 0; x < cols; x++) {\n            board.push([]);\n            for (var y = 0; y < rows; y++) {\n                board[x].push(0);\n            }\n        }\n        return board;\n    };\n    BoardHandler.prototype.getBoard = function () {\n        return utils.copyArray(this.board); // return a deep copy of the board\n    };\n    BoardHandler.prototype.log = function () {\n        var temp = utils.transpose(this.board);\n        console.log(\"\\n            \" + temp[0] + \"\\n            \" + temp[1] + \"\\n            \" + temp[2] + \"\\n            \" + temp[3] + \"\\n            \" + temp[4] + \"\\n            \" + temp[5] + \"\\n        \");\n    };\n    BoardHandler.prototype.handlePlayerSelection = function (columnIndex, player) {\n        // check if a move can be made on the desired column\n        var row = 0;\n        if (this.board[columnIndex][0] === 0) {\n            for (var i = this.board[columnIndex].length - 1; i >= 0; i--) {\n                if (this.board[columnIndex][i] === 0) {\n                    this.board[columnIndex][i] = player;\n                    row = i;\n                    break;\n                }\n            }\n            return { col: columnIndex, row: row };\n        }\n        else {\n            return false;\n        }\n    };\n    BoardHandler.prototype.handleComputerChoice = function (col, row) {\n        this.board[col][row] = 2;\n    };\n    BoardHandler.prototype.checkMoveForWin = function (move, player) {\n        if (this.checkLoopForWin(this.board[move.col], player)) {\n            return true;\n        }\n        // eval row\n        var tempRow = [];\n        for (var x = 0; x < this.board.length; x++) {\n            tempRow.push(this.board[x][move.row]);\n        }\n        if (this.checkLoopForWin(tempRow, player)) {\n            return true;\n        }\n        // check diagonals\n        // first we go bottom left to top right /\n        // first find start of diagonal row from move position\n        var c = move.col, r = move.row;\n        while (r < this.ROWS - 1 && c > 0) {\n            c--;\n            r++;\n        }\n        // iterate through cells diagonally /\n        // j = col, k = row\n        var tempDiagNorthEast = [];\n        for (c; c < this.board.length; c++) {\n            tempDiagNorthEast.push(this.board[c][r]);\n            r--;\n            if (r < 0) {\n                break;\n            }\n        }\n        if (this.checkLoopForWin(tempDiagNorthEast, player)) {\n            return true;\n        }\n        // now we check bottom right to top left;\n        c = move.col;\n        r = move.row;\n        while (r < this.ROWS - 1 && c < this.COLS - 1) {\n            c++;\n            r++;\n        }\n        var tempDiagNorthWest = [];\n        for (c; c >= 0; c--) {\n            tempDiagNorthWest.push(this.board[c][r]);\n            r--;\n            if (r < 0) {\n                break;\n            }\n        }\n        if (this.checkLoopForWin(tempDiagNorthWest, player)) {\n            return true;\n        }\n        return false;\n    };\n    BoardHandler.prototype.checkLoopForWin = function (set, player) {\n        var count = 0;\n        for (var i = 0; i < set.length; i++) {\n            if (set[i] === player) {\n                count++;\n            }\n            if (set[i] !== player) {\n                count = 0;\n            }\n            if (count > 3)\n                return true;\n        }\n        return false;\n    };\n    BoardHandler.prototype.reset = function () {\n        this.board = this.buildBoard(this.COLS, this.ROWS);\n    };\n    return BoardHandler;\n}());\nexports.BoardHandler = BoardHandler;\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/board_data.ts?");

/***/ }),

/***/ "./src/board_html.ts":
/*!***************************!*\
  !*** ./src/board_html.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HtmlHandler = void 0;\nvar HtmlHandler = /** @class */ (function () {\n    function HtmlHandler(cols, rows, handler) {\n        this.board = document.getElementById(\"board\");\n        this.cols = cols;\n        this.rows = rows;\n        this.handler = handler;\n    }\n    HtmlHandler.prototype.create = function () {\n        var _this = this;\n        if (this.board) {\n            for (var x = 0; x < this.cols; x++) {\n                var column = document.createElement(\"div\");\n                column.setAttribute(\"id\", \"col-\" + x);\n                column.classList.add(\"column\");\n                for (var y = 0; y < this.rows; y++) {\n                    var row = document.createElement(\"div\");\n                    row.setAttribute(\"id\", \"row-\" + y);\n                    row.classList.add(\"row\");\n                    // add label to row!\n                    row.innerText = x + \",\" + y;\n                    column.appendChild(row);\n                }\n                this.board.appendChild(column);\n            }\n            // add an event listener to handle clicks on the board;\n            var that_1 = this;\n            var columns = this.board.querySelectorAll(\".column\");\n            columns.forEach(function (element) {\n                element.addEventListener(\"click\", _this.handleClick.bind(that_1));\n            });\n        }\n        else {\n            throw new Error(\"The board is undefined\");\n        }\n    };\n    HtmlHandler.prototype.handleClick = function (e) {\n        var column = 0;\n        var target = e.target;\n        if (target.getAttribute(\"class\") === \"row\") {\n            column = parseInt(target.parentElement.getAttribute(\"id\")[4]);\n        }\n        if (target.getAttribute(\"class\") === \"column\") {\n            column = parseInt(target.getAttribute(\"id\")[4]);\n        }\n        this.handler.receiveClick(column);\n    };\n    HtmlHandler.prototype.update = function (col, row, player) {\n        // find the relevant cell and update it's color;\n        var color = player === 1 ? \"red\" : \"yellow\";\n        var column = this.board.querySelector(\"#col-\" + col);\n        var cell = column === null || column === void 0 ? void 0 : column.querySelector(\"#row-\" + row);\n        cell === null || cell === void 0 ? void 0 : cell.setAttribute(\"style\", \"background:\" + color);\n    };\n    HtmlHandler.prototype.reset = function () {\n        if (this.board) {\n            this.board.innerHTML = \"\";\n            this.create();\n        }\n    };\n    return HtmlHandler;\n}());\nexports.HtmlHandler = HtmlHandler;\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/board_html.ts?");

/***/ }),

/***/ "./src/computer.ts":
/*!*************************!*\
  !*** ./src/computer.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Computer = void 0;\nvar utils = __importStar(__webpack_require__(/*! ./utils */ \"./src/utils.ts\"));\nvar diag_indices_1 = __webpack_require__(/*! ./diag_indices */ \"./src/diag_indices.ts\");\n// computer is player 2!!\nvar Computer = /** @class */ (function () {\n    // heuristicScores: number[];\n    function Computer(cols, rows, depth, handler) {\n        this.handler = handler;\n        this.COLS = cols;\n        this.ROWS = rows;\n        this.DEPTH = depth;\n        // this.heuristicScores = [];\n    }\n    Computer.prototype.makeMove = function (board) {\n        var _this = this;\n        // this.heuristicScores = [];\n        var player = 2;\n        var bestScore = -Infinity;\n        var moves = this.getMoves(board);\n        var bestMoves = [];\n        if (moves.length === 0) {\n            return false;\n        }\n        moves.forEach(function (move) {\n            board[move.col][move.row] = player;\n            var score = _this.minMax(board, move, _this.DEPTH, false);\n            board[move.col][move.row] = 0;\n            if (score > bestScore) {\n                bestScore = score;\n                bestMoves = [{ move: move, score: score }];\n            }\n            else {\n                if (score === bestScore) {\n                    bestMoves.push({ move: move, score: score });\n                }\n            }\n        });\n        if (bestMoves.length > 1) {\n            return bestMoves[utils.randomInteger(0, bestMoves.length - 1)].move;\n        }\n        else {\n            return bestMoves[0].move;\n        }\n    };\n    Computer.prototype.getMoves = function (board) {\n        var moves = [];\n        for (var x = 0; x < board.length; x++) {\n            for (var y = board[x].length - 1; y >= 0; y--) {\n                if (board[x][y] === 0) {\n                    moves.push({ col: x, row: y });\n                    break;\n                }\n            }\n        }\n        return moves;\n    };\n    Computer.prototype.minMax = function (board, move, depth, isMax) {\n        var _this = this;\n        var score = this.evaluateBoard(utils.copyArray(board));\n        if (depth === 0 || score !== 0) {\n            // we are done return score\n            if (score !== 0) {\n                return score;\n            }\n            else {\n                var h_score = this.heuristicEval(utils.copyArray(board), move, isMax === false ? 2 : 1);\n                // this.heuristicScores.push(h_score);\n                return h_score;\n                // return score;\n            }\n        }\n        if (isMax) {\n            var bestScore_1 = -Infinity;\n            var moves = this.getMoves(board);\n            moves.forEach(function (move) {\n                board[move.col][move.row] = 2;\n                bestScore_1 = Math.max(bestScore_1, _this.minMax(board, move, depth - 1, false));\n                board[move.col][move.row] = 0;\n            });\n            return bestScore_1;\n        }\n        else {\n            var bestScore_2 = Infinity;\n            var moves = this.getMoves(board);\n            moves.forEach(function (move) {\n                board[move.col][move.row] = 1;\n                bestScore_2 = Math.min(bestScore_2, _this.minMax(board, move, depth - 1, true));\n                board[move.col][move.row] = 0;\n            });\n            return bestScore_2;\n        }\n    };\n    Computer.prototype.evaluateBoard = function (board) {\n        var totalScore = 0;\n        // eval rows\n        for (var y = 0; y < this.ROWS; y++) {\n            var p1_points = 0;\n            var p2_points = 0;\n            var p1_count = 0;\n            var p2_count = 0;\n            for (var x = 0; x < this.COLS; x++) {\n                if (board[x][y] === 1) {\n                    p1_count++;\n                    p2_count = 0;\n                    if (p1_count === 4) {\n                        p1_points++;\n                        p1_count -= 1;\n                    }\n                }\n                else if (board[x][y] === 2) {\n                    p2_count++;\n                    p1_count = 0;\n                    if (p2_count === 4) {\n                        p2_points++;\n                        p2_count -= 1;\n                    }\n                }\n                else {\n                    p1_count = 0;\n                    p2_count = 0;\n                }\n            }\n            totalScore -= p1_points * 1001;\n            totalScore += p2_points * 1000;\n        }\n        // eval columns\n        for (var x = 0; x < this.COLS; x++) {\n            var p1_points = 0;\n            var p2_points = 0;\n            var p1_count = 0;\n            var p2_count = 0;\n            for (var y = this.ROWS - 1; y >= 0; y--) {\n                if (board[x][y] === 1) {\n                    p1_count++;\n                    p2_count = 0;\n                    if (p1_count === 4) {\n                        p1_points++;\n                        p1_count -= 1;\n                    }\n                }\n                else if (board[x][y] === 2) {\n                    p2_count++;\n                    p1_count = 0;\n                    if (p2_count === 4) {\n                        p2_points++;\n                        p2_count -= 1;\n                    }\n                }\n                else {\n                    p1_count = 0;\n                    p2_count = 0;\n                }\n            }\n            totalScore -= p1_points * 1001;\n            totalScore += p2_points * 1000;\n        }\n        // eval north east diagonal\n        diag_indices_1.NE_indices.forEach(function (diag) {\n            var p1_points = 0;\n            var p2_points = 0;\n            var p1_count = 0;\n            var p2_count = 0;\n            diag.forEach(function (item) {\n                if (board[item.x][item.y] === 1) {\n                    p1_count++;\n                    p2_count = 0;\n                    if (p1_count === 4) {\n                        p1_points++;\n                        p1_count -= 1;\n                    }\n                }\n                else if (board[item.x][item.y] === 2) {\n                    p2_count++;\n                    p1_count = 0;\n                    if (p2_count === 4) {\n                        p2_points++;\n                        p2_count -= 1;\n                    }\n                }\n                else {\n                    p1_count = 0;\n                    p2_count = 0;\n                }\n            });\n            totalScore -= p1_points * 1001;\n            totalScore += p2_points * 1000;\n        });\n        // eval north west diagonal\n        diag_indices_1.NW_indices.forEach(function (diag) {\n            var p1_points = 0;\n            var p2_points = 0;\n            var p1_count = 0;\n            var p2_count = 0;\n            diag.forEach(function (item) {\n                if (board[item.x][item.y] === 1) {\n                    p1_count++;\n                    p2_count = 0;\n                    if (p1_count === 4) {\n                        p1_points++;\n                        p1_count -= 1;\n                    }\n                }\n                else if (board[item.x][item.y] === 2) {\n                    p2_count++;\n                    p1_count = 0;\n                    if (p2_count === 4) {\n                        p2_points++;\n                        p2_count -= 1;\n                    }\n                }\n                else {\n                    p1_count = 0;\n                    p2_count = 0;\n                }\n            });\n            totalScore -= p1_points * 1001;\n            totalScore += p2_points * 1000;\n        });\n        return totalScore;\n    };\n    Computer.prototype.heuristicEval = function (board, move, player) {\n        // check possible combinations of four in row. higher number, higher score!\n        // we need to get all possible 4 in a row combinations and evaluate them.\n        // Any combination with the other players piece in, automatically gets discarded as this would mean a 4 in a row is not possible.\n        // This means those combinations with other players piece in will always get lowest score (0)... so when minimizing will be best (computer will sabotage player)\n        // we also get added bonus of scores for possible combinations if all adjacent cells are empty.\n        var enemy = player === 1 ? 2 : 1;\n        var combinationScore = 0;\n        // rows first\n        // get most left col (max 3 steps away from move.col)\n        var c = move.col;\n        var steps = 3;\n        while (c > 0 && steps > 0) {\n            steps--;\n            c--;\n        }\n        // now find permutations and add up scores. more positions filled = higher score.\n        var rowScore = 0;\n        for (var i = 0; i < 4; i++) {\n            if (c + 3 <= this.ROWS && c <= move.col) {\n                if (board[c][move.row] !== enemy && board[c + 1][move.row] !== enemy && board[c + 2][move.row] !== enemy && board[c + 3][move.row] !== enemy) {\n                    rowScore += board[c][move.row] + board[c + 1][move.row] + board[c + 2][move.row] + board[c + 3][move.row];\n                    // console.log([board[c][move.row], board[c + 1][move.row], board[c + 2][move.row], board[c + 3][move.row]]);\n                }\n            }\n            c++;\n        }\n        // now columns....\n        // get highest row (bottom of column is actually highest index in our setup) (max 3 steps away from move.row)\n        var r = move.row;\n        c = move.col; // reset c, so I don't have to write move.col a load of times!\n        steps = 3;\n        while (r < this.ROWS - 1 && steps > 0) {\n            steps--;\n            r++;\n        }\n        var colScore = 0;\n        for (var i = 0; i < 4; i++) {\n            if (r - 3 >= 0 && r >= move.row) {\n                if (board[c][r] !== enemy && board[c][r - 1] !== enemy && board[c][r - 2] !== enemy && board[c][r - 3] !== enemy) {\n                    colScore += board[c][r] + board[c][r - 1] + board[c][r - 2] + board[c][r - 3];\n                }\n            }\n            r--;\n        }\n        // TODO - diagonal checks...\n        combinationScore = rowScore + colScore;\n        return combinationScore;\n    };\n    return Computer;\n}());\nexports.Computer = Computer;\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/computer.ts?");

/***/ }),

/***/ "./src/diag_indices.ts":
/*!*****************************!*\
  !*** ./src/diag_indices.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NW_indices = exports.NE_indices = void 0;\nexports.NE_indices = [\n    [\n        { x: 0, y: 3 },\n        { x: 1, y: 2 },\n        { x: 2, y: 1 },\n        { x: 3, y: 0 },\n    ],\n    [\n        { x: 0, y: 4 },\n        { x: 1, y: 3 },\n        { x: 2, y: 2 },\n        { x: 3, y: 1 },\n        { x: 4, y: 0 },\n    ],\n    [\n        { x: 0, y: 5 },\n        { x: 1, y: 4 },\n        { x: 2, y: 3 },\n        { x: 3, y: 2 },\n        { x: 4, y: 1 },\n        { x: 5, y: 0 },\n    ],\n    [\n        { x: 1, y: 5 },\n        { x: 2, y: 4 },\n        { x: 3, y: 3 },\n        { x: 4, y: 2 },\n        { x: 5, y: 1 },\n        { x: 6, y: 0 },\n    ],\n    [\n        { x: 2, y: 5 },\n        { x: 3, y: 4 },\n        { x: 4, y: 3 },\n        { x: 5, y: 2 },\n        { x: 6, y: 1 },\n    ],\n    [\n        { x: 3, y: 5 },\n        { x: 4, y: 4 },\n        { x: 5, y: 3 },\n        { x: 6, y: 2 },\n    ],\n];\nexports.NW_indices = [\n    [\n        { x: 6, y: 3 },\n        { x: 5, y: 2 },\n        { x: 4, y: 1 },\n        { x: 3, y: 0 },\n    ],\n    [\n        { x: 6, y: 4 },\n        { x: 4, y: 3 },\n        { x: 4, y: 2 },\n        { x: 3, y: 1 },\n        { x: 2, y: 0 },\n    ],\n    [\n        { x: 6, y: 5 },\n        { x: 5, y: 4 },\n        { x: 4, y: 3 },\n        { x: 3, y: 2 },\n        { x: 2, y: 1 },\n        { x: 1, y: 0 },\n    ],\n    [\n        { x: 5, y: 5 },\n        { x: 4, y: 4 },\n        { x: 3, y: 3 },\n        { x: 2, y: 2 },\n        { x: 1, y: 1 },\n        { x: 0, y: 0 },\n    ],\n    [\n        { x: 4, y: 5 },\n        { x: 3, y: 4 },\n        { x: 2, y: 3 },\n        { x: 1, y: 2 },\n        { x: 0, y: 1 },\n    ],\n    [\n        { x: 3, y: 5 },\n        { x: 2, y: 4 },\n        { x: 1, y: 3 },\n        { x: 0, y: 2 },\n    ],\n];\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/diag_indices.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Handler = void 0;\nvar board_html_1 = __webpack_require__(/*! ./board_html */ \"./src/board_html.ts\");\nvar board_data_1 = __webpack_require__(/*! ./board_data */ \"./src/board_data.ts\");\nvar computer_1 = __webpack_require__(/*! ./computer */ \"./src/computer.ts\");\nvar Handler = /** @class */ (function () {\n    function Handler() {\n        this.htmlHandler = new board_html_1.HtmlHandler(7, 6, this);\n        this.boardHandler = new board_data_1.BoardHandler(7, 6, this);\n        this.computer = new computer_1.Computer(7, 6, 4, this);\n        this.currentPlayer = 1;\n        this.isWon = false;\n        this.recentMove = { col: 0, row: 0 };\n    }\n    Handler.prototype.init = function () {\n        this.htmlHandler.create();\n    };\n    Handler.prototype.receiveClick = function (columnIndex) {\n        // console.log(`column: ${columnIndex} was clicked`);\n        var _this = this;\n        if (!this.isWon) {\n            if (this.currentPlayer === 1) {\n                var validMove = this.boardHandler.handlePlayerSelection(columnIndex, 1);\n                if (validMove) {\n                    this.recentMove = validMove;\n                    this.htmlHandler.update(validMove.col, validMove.row, 1);\n                    this.sendMessage(\"You chose column: \" + validMove.col + \", row: \" + validMove.row);\n                    if (this.boardHandler.checkMoveForWin(validMove, 1)) {\n                        this.updateGameWon();\n                        return;\n                    }\n                }\n                else {\n                    this.sendMessage(\"error, this is not a valid move\", \"error\");\n                }\n                this.sendMessage(\"The computer is thinking...\");\n                // allow the html to update before the computer move is made...\n                setTimeout(function () {\n                    _this.handleComputerMove();\n                }, 10);\n            }\n        }\n    };\n    Handler.prototype.handleComputerMove = function () {\n        this.currentPlayer = 2;\n        var move = this.computer.makeMove(this.boardHandler.getBoard());\n        if (move && move.col != -1) {\n            this.recentMove = move;\n            this.boardHandler.handleComputerChoice(move.col, move.row);\n            this.htmlHandler.update(move.col, move.row, 2);\n            this.sendMessage(\"Computer chose column: \" + move.col + \", row: \" + move.row);\n            if (this.boardHandler.checkMoveForWin(move, 2)) {\n                this.updateGameWon();\n                return;\n            }\n        }\n        this.currentPlayer = 1;\n    };\n    Handler.prototype.updateGameWon = function () {\n        this.isWon = true;\n        this.sendMessage(\"PLAYER \" + this.currentPlayer + \" WON THE GAME!!!\", \"win\");\n        // to do: add something in html for this indication!\n    };\n    Handler.prototype.sendMessage = function (message, className) {\n        if (className === void 0) { className = \"\"; }\n        var div = document.getElementById(\"message\");\n        var currentTime = new Date().toLocaleTimeString();\n        var p = document.createElement(\"p\");\n        if (className != \"\") {\n            p.className = className;\n        }\n        p.innerText = currentTime + \": \" + message;\n        div.prepend(p);\n        // console.log(message);\n    };\n    Handler.prototype.reset = function () {\n        var div = document.getElementById(\"message\");\n        div.innerHTML = \"\";\n        this.currentPlayer = 1;\n        this.isWon = false;\n        this.boardHandler.reset();\n        this.htmlHandler.reset();\n    };\n    return Handler;\n}());\nexports.Handler = Handler;\nvar handler = new Handler();\nhandler.init();\nvar reset = document.getElementById(\"reset-btn\");\nreset === null || reset === void 0 ? void 0 : reset.addEventListener(\"click\", function () {\n    handler.reset();\n});\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/index.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.transpose = exports.copyArray = exports.randomInteger = void 0;\nvar randomInteger = function (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexports.randomInteger = randomInteger;\nvar copyArray = function (a) {\n    // hacky way to copy a nested array\n    return JSON.parse(JSON.stringify(a));\n};\nexports.copyArray = copyArray;\nvar transpose = function (m) {\n    return m[0].map(function (x, i) { return m.map(function (x) { return x[i]; }); });\n};\nexports.transpose = transpose;\n\n\n//# sourceURL=webpack://connect_four_minimax_typescript/./src/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;